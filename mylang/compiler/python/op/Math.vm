function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add  
push constant 1
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 1
add  
push constant 2
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 2
add  
push constant 4
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 3
add  
push constant 8
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 4
add  
push constant 16
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 5
add  
push constant 32
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 6
add  
push constant 64
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 7
add  
push constant 128
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 8
add  
push constant 256
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 9
add  
push constant 512
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 10
add  
push constant 1024
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 11
add  
push constant 2048
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 12
add  
push constant 4096
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 13
add  
push constant 8192
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 14
add  
push constant 16384
pop temp 1
pop pointer 1
push temp 1
pop that 0
push static 0
push constant 15
add  
push constant 16384
push constant 16384
add  
pop temp 1
pop pointer 1
push temp 1
pop that 0
push constant 0
return  
function Math.bit 0
push argument 0
push static 0
push argument 1
add  
pop pointer 1
push that 0
and  
push constant 0
eq  
not  
return  
function Math.two_to_the 0
push static 0
push argument 0
add  
pop pointer 1
push that 0
return  
function Math.abs 0
push argument 0
push constant 0
lt  
not  
if-goto label2 
push argument 0
neg  
pop argument 0
goto label1 
label label2 
label label1 
push argument 0
return  
function Math.multiply 3
push constant 0
pop local 0
push argument 0
pop local 1
push constant 0
pop local 2
label label3 
push local 2
push constant 16
lt  
not  
if-goto label4 
push argument 1
push local 2
call Math.bit 2
not  
if-goto label6 
push local 0
push local 1
add  
pop local 0
goto label5 
label label6 
label label5 
push local 1
push local 1
add  
pop local 1
push local 2
push constant 1
add  
pop local 2
goto label3 
label label4 
push local 0
return  
function Math.divide 4
push argument 0
push constant 0
lt  
pop local 0
push argument 1
push constant 0
lt  
pop local 1
push argument 0
call Math.abs 1
pop argument 0
push argument 1
call Math.abs 1
pop argument 1
push argument 1
push argument 0
gt  
not  
if-goto label8 
push constant 0
return  
goto label7 
label label8 
label label7 
push argument 0
push argument 1
push argument 1
add  
call Math.divide 2
pop local 2
push argument 0
push constant 2
push local 2
call Math.multiply 2  
push argument 1
call Math.multiply 2  
sub  
push argument 1
lt  
not  
if-goto label10 
push local 2
push local 2
add  
pop local 3
goto label9 
label label10 
push local 2
push local 2
add  
push constant 1
add  
pop local 3
label label9 
push local 0
push local 1
eq  
not  
if-goto label12 
push local 3
return  
goto label11 
label label12 
push local 3
neg  
return  
label label11 
function Math.mod 1
push argument 0
push argument 1
call Math.divide 2
pop local 0
push argument 0
push local 0
push argument 1
call Math.multiply 2  
sub  
return  
function Math.sqrt 4
push constant 0
pop local 1
push constant 7
pop local 0
label label13 
push local 0
push constant 0
lt  
not  
not  
if-goto label14 
push local 1
push static 0
push local 0
add  
pop pointer 1
push that 0
add  
pop local 2
push local 2
push local 2
call Math.multiply 2  
pop local 3
push local 3
push argument 0
gt  
not  
push local 3
push constant 0
gt  
and  
not  
if-goto label16 
push local 2
pop local 1
goto label15 
label label16 
label label15 
push local 0
push constant 1
sub  
pop local 0
goto label13 
label label14 
push local 1
return  
function Math.max 0
push argument 0
push argument 1
gt  
not  
if-goto label18 
push argument 0
return  
goto label17 
label label18 
push argument 1
return  
label label17 
function Math.min 0
push argument 0
push argument 1
lt  
not  
if-goto label20 
push argument 0
return  
goto label19 
label label20 
push argument 1
return  
label label19 
